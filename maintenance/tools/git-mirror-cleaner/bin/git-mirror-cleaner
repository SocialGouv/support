#!/usr/bin/env bash

{

gmc_clean() {
  if [ "$#" -lt 2 ]; then
    gmc_err "Not enough arguments"
    return 5
  fi

  local origin
  origin="${1}"
  local mirror
  mirror="${2}"

  gmc_set origin "${origin}"
  gmc_set mirror "${mirror}"

  git fetch ${origin} -p
  git fetch ${mirror} -p

  gmc_set origin_branches "$(gmc_get_remote_branches origin)"
  gmc_set mirror_branches "$(gmc_get_remote_branches mirror)"

  local branches_to_remove
  branches_to_remove="$(gmc_compare_origin_mirror)"
  local count_to_remove

  if [[ -z "${branches_to_remove}" ]]; then
    count_to_remove=0
  else
    count_to_remove=$( wc -l <<< ${branches_to_remove})
  fi

  if [ ${count_to_remove} -eq 0 ]; then
    gmc_echo "Nothing to do"
  else
    gmc_echo "About to remove ${count_to_remove} branches from ${mirror}"

    gmc_remove_mirror_branches $(tr '\n' ' ' <<< ${branches_to_remove})

    gmc_echo "ðŸ§¹ Mirror cleaned âœ¨"
  fi
}

#

gmc_get_remote_branches() {
  if [ "$#" -lt 1 ]; then
    gmc_err "Not enough arguments"
    return 5
  fi

  local remote
  remote=$(gmc_get ${1})

  if [ -z "${remote}" ]; then
    gmc_err "No '${1}' remote defined"
    return 2
  fi

  git branch -a \
    | grep "remotes/${remote}" \
    | grep -v HEAD \
    | cut -d "/" -f 3- \
    | sort
}

gmc_compare_origin_mirror() {
  comm -31 "$(gmc_tmp)/origin_branches" "$(gmc_tmp)/mirror_branches"
}

gmc_remove_mirror_branches() {
  local mirror=$(gmc_get mirror)

  if [ -z "${mirror}" ]; then
    gmc_err "A mirror branch is required."
    return 2
  fi

  if [ "$#" -lt 1 ]; then
    gmc_err "Not enough arguments"
    return 5
  fi

  local branches
  branches="${@}"
  for branch in ${branches}
  do
    sem --will-cite -j+0 "bash -c 'git push ${mirror} :${branch}'"
  done
  sem --wait
}

#

gmc_set() {
  local file="$(gmc_tmp)/${1}"
  echo -e "${2}" > "${file}"
}

gmc_get() {
  local file="$(gmc_tmp)/${1}"
  if [ -f "${file}" ]; then
    cat "${file}"
  fi
}

#

gmc_tmp() {
  if [ -z "${GMC_TMP}" ]; then
    GMC_TMP=$(mktemp -d /tmp/git-mirror-cleaner.XXXXXX)
  fi
  printf %s "${GMC_TMP}"
}

#

gmc_err() {
  >&2 gmc_echo "$@"
}

gmc_echo() {
  command printf %s\\n "$*" 2>/dev/null
}

#
# Unsets the various functions defined
# during the execution of the cleaning script
#
gmc_reset() {
  unset -f gmc_clean \
    gmc_compare_origin_mirror \
    gmc_echo \
    gmc_err \
    gmc_get \
    gmc_get_remote_branches \
    gmc_remove_mirror_branches \
    gmc_set \
    gmc_tmp \
    gmc_reset

  unset GMC_TMP
}

#

export GMC_TMP=$(gmc_tmp) || exit $?
# trap "rm -rf "${GMC_TMP}"" EXIT INT TERM
# trap "gmc_reset" EXIT INT TERM
# trap - EXIT INT TERM

[ "_${GIT_MIRROR_CLEANER_ENV}" = "_testing" ] || gmc_clean $@

}
